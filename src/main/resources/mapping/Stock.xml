<?xml version="1.0" encoding="UTF-8"?>
<!-- 不写会报错 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mhy.crawl.dao.StockDao">

    <!-- 自定义返回结果集 -->
    <resultMap id="stockMap" type="com.mhy.crawl.data.model.Stock">
        <id property="id" column="id" javaType="java.lang.Integer"></id>
        <result property="symbol" column="symbol" javaType="java.lang.String"></result>
        <result property="name" column="name" javaType="java.lang.String"></result>
        <result property="volume" column="volume" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="code" column="code" javaType="java.lang.String" jdbcType="VARCHAR"></result>
        <result property="currency_unit" column="currency_unit" javaType="java.lang.String" jdbcType="VARCHAR"></result>
        <result property="current" column="current" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="percentage" column="percentage" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="change" column="change" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="open" column="open" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="high" column="high" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="close" column="close" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="low" column="low" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="last_close" column="last_close" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="high52Week" column="high52Week" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="low52week" column="low52week" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="volumeAverage" column="volumeAverage" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="marketCapital" column="marketCapital" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="eps" column="eps" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="amplitude" column="amplitude" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="fall_stop" column="fall_stop" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="rise_stop" column="rise_stop" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="pe_ttm" column="pe_ttm" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="pe_lyr" column="pe_lyr" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="beta" column="beta" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="time" column="time" javaType="java.lang.String" jdbcType="DATE"></result>
        <result property="updateAt" column="updateAt" javaType="java.lang.String" jdbcType="TIMESTAMP"></result>
        <result property="totalShares" column="totalShares" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="afterHours" column="afterHours" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="dividend" column="dividend" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="float_shares" column="float_shares" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="float_market_capital" column="float_market_capital" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="net_assets" column="net_assets" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="psr" column="psr" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="turnover_rate" column="turnover_rate" javaType="java.lang.String" jdbcType="DOUBLE"></result>
        <result property="amount" column="amount" javaType="java.lang.String" jdbcType="DOUBLE"></result>
    </resultMap>
    <!-- 在各种标签中的id属性必须和接口中的方法名相同 ， id属性值必须是唯一的，不能够重复使用。parameterType属性指明查询时使用的参数类型，
    resultType属性指明查询返回的结果集类型-->
    <!-- useGeneratedKeys：（ 仅 对 insert 有 用 ） 这 会 告 诉 MyBatis 使 用 JDBC 的getGeneratedKeys
         方法来取出由数据（比如：像 MySQL 和 SQLServer 这样的数据库管理系统的自动递增字段）内部生成的主键。默认值： false。
         oracle 不支持应该设置成 useGeneratedKeys="false" 不然会报错
    -->
    <!--keyProperty： （仅对 insert有用）标记一个属性， MyBatis 会通过 getGeneratedKeys或者通过 insert 语句的 selectKey 子元素设置它的值。默认：不设置。 -->
    <!--#{}中的内容，为占位符，当参数为某个JavaBean时，表示放置该Bean对象的属性值  -->


    <insert id="insert" parameterType="Stock">
        insert into stock (
        id,
        name,
        symbol,
        exchange,
        code,
        currency_unit ,
        current ,
        percentage ,
        change,
        open ,
        high ,
        low ,
        close ,
        last_close ,
        high52Week ,
        low52week,
        volume,
        volumeAverage,
        marketCapital ,
        eps ,
        amplitude ,
        fall_stop ,
        rise_stop,
        pe_ttm ,
        pe_lyr,
        beta,
        totalShares ,
        time,
        afterHours,
        updateAt,
        dividend ,
        float_shares,
        float_market_capital,
        net_assets,
        psr ,
        turnover_rate ,
        amount
        ) values (
        NULL,
        #{name ,jdbcType= VARCHAR },
        #{symbol,jdbcType= VARCHAR },
        #{exchange,jdbcType= VARCHAR },
        #{code,jdbcType= VARCHAR },
        #{currency_unit,jdbcType= VARCHAR },
        #{current,jdbcType= DOUBLE },
        #{percentage,jdbcType= DOUBLE },
        #{change,jdbcType= DOUBLE },
        #{open,jdbcType= DOUBLE },
        #{high ,jdbcType= DOUBLE },
        #{low,jdbcType= DOUBLE },
        #{close ,jdbcType= DOUBLE },
        #{last_close ,jdbcType= DOUBLE },
        #{high52Week,jdbcType= DOUBLE },
        #{low52week,jdbcType= DOUBLE },
        #{volume,jdbcType= DOUBLE },
        #{volumeAverage,jdbcType= DOUBLE },
        #{marketCapital ,jdbcType= DOUBLE },
        #{eps,jdbcType= DOUBLE },
        #{amplitude ,jdbcType= DOUBLE },
        #{fall_stop ,jdbcType= DOUBLE },
        #{rise_stop,jdbcType= DOUBLE },
        #{pe_ttm ,jdbcType= DOUBLE },
        #{pe_lyr,jdbcType= DOUBLE },
        #{beta,jdbcType= DOUBLE },
        #{totalShares ,jdbcType= DOUBLE },
        #{time,jdbcType= DATE },
        #{afterHours,jdbcType= DOUBLE },
        #{updateAt,jdbcType= TIMESTAMP },
        #{dividend ,jdbcType= DOUBLE },
        #{float_shares,jdbcType= DOUBLE },
        #{float_market_capital,jdbcType= DOUBLE },
        #{net_assets,jdbcType= DOUBLE },
        #{psr ,jdbcType= DOUBLE },
        #{turnover_rate ,jdbcType= DOUBLE },
        #{amount,jdbcType= DOUBLE }
        )
    </insert>

    <insert id="batchInsert" parameterType="List">
        insert into stock (
        id,
        name,
        symbol,
        exchange,
        code,
        currency_unit ,
        current ,
        percentage ,
        change,
        open ,
        high ,
        low ,
        close ,
        last_close ,
        high52Week ,
        low52week,
        volume,
        volumeAverage,
        marketCapital ,
        eps ,
        amplitude ,
        fall_stop ,
        rise_stop,
        pe_ttm ,
        pe_lyr,
        beta,
        totalShares ,
        time,
        afterHours,
        updateAt,
        dividend ,
        float_shares,
        float_market_capital,
        net_assets,
        psr ,
        turnover_rate ,
        amount
        )VALUES
        <foreach collection ="list" item="stock" index= "index" separator =",">
            (
            NULL,
            #{stock.name,jdbcType= VARCHAR },
            #{stock.symbol,jdbcType= VARCHAR },
            #{stock.exchange,jdbcType= VARCHAR },
            #{stock.code,jdbcType= VARCHAR },
            #{stock.currency_unit ,jdbcType= VARCHAR },
            #{stock.current ,jdbcType= DOUBLE },
            #{stock.percentage ,jdbcType= DOUBLE },
            #{stock.change,jdbcType= DOUBLE },
            #{stock.open ,jdbcType= DOUBLE },
            #{stock.high ,jdbcType= DOUBLE },
            #{stock.low ,jdbcType= DOUBLE },
            #{stock.close ,jdbcType= DOUBLE },
            #{stock.last_close ,jdbcType= DOUBLE },
            #{stock.high52Week ,jdbcType= DOUBLE },
            #{stock.low52week,jdbcType= DOUBLE },
            #{stock.volume,jdbcType= DOUBLE },
            #{stock.volumeAverage,jdbcType= DOUBLE },
            #{stock.marketCapital ,jdbcType= DOUBLE },
            #{stock.eps ,jdbcType= DOUBLE },
            #{stock.amplitude ,jdbcType= DOUBLE },
            #{stock.fall_stop ,jdbcType= DOUBLE },
            #{stock.rise_stop,jdbcType= DOUBLE },
            #{stock.pe_ttm ,jdbcType= DOUBLE },
            #{stock.pe_lyr,jdbcType= DOUBLE },
            #{stock.beta,jdbcType= DOUBLE },
            #{stock.totalShares ,jdbcType= DOUBLE },
            #{stock.time,jdbcType= DATE },
            #{stock.afterHours,jdbcType= DOUBLE },
            #{stock.updateAt,jdbcType= TIMESTAMP },
            #{stock.dividend ,jdbcType= DOUBLE },
            #{stock.float_shares,jdbcType= DOUBLE },
            #{stock.float_market_capital,jdbcType= DOUBLE },
            #{stock.net_assets,jdbcType= DOUBLE },
            #{stock.psr ,jdbcType= DOUBLE },
            #{stock.turnover_rate ,jdbcType= DOUBLE },
            #{stock.amount,jdbcType= DOUBLE }
            )
        </foreach >
    </insert>

    <!--<update id="updateUser" >
        update t_user set username=#{username},password=#{password},account=#{account} where id=#{id}
    </update>

    <delete id="deleteUser" parameterType="int">
        delete from t_user where id=#{id}
    </delete>

    <select id="selectUserById" parameterType="int" resultMap="userMap">
        select * from t_user where id=#{id}
    </select>

    <select id="selectAllUser" resultMap="userMap">
        select * from t_user
    </select>-->
</mapper>